(set-logic ALL)
; Define the function for which you are constructing a transformer
(define-fun p ((x Real)) Real
(ite (> x 0) x (- x))
)

(define-fun g ((x Real)) Real
(+ x (p x))
)

(define-fun h ((x Real)) Real
(- x (p x))
)

; f(x) = min(x-|x|, x+|x|)
(define-fun f ((x Real)) Real
(ite (> (g x) (h x)) (h x) (g x)) 
)
; To state the correctness of the transformer, ask the solver if there is
; (1) a Real number x and (2) an interval [l,u]
; that violate the soundness property, i.e., satisfy the negation of the soundness property.


(synth-fun Tf_lower ((x Real) (y Real)) Real
  ((Start Real) (StartBool Bool))
  ((Start Real (
               (ite StartBool (h x) (g x))
               (ite StartBool Start Start)))
   (StartBool Bool (
                    (> (g x) (h x))
                    (< Start Start)
                    (> Start Start)
                    ))))

(synth-fun Tf_upper ((x Real) (y Real)) Real
  ((Start Real) (StartBool Bool))
  ((Start Real (
               (ite StartBool (h y) (g y))
               (ite StartBool Start Start)))
   (StartBool Bool (
                    (> (g y) (h y))
                    (< Start Start)
                    (> Start Start)
                    ))))


(declare-var x Real)
(declare-var l Real)
(declare-var u Real)

(constraint 
(=>
(and (<= l x) (<= x u)) ; if input is within given bounds
(and (<= (Tf_lower l u) (f x)) (<= (f x) (Tf_upper l u))) ; then output is within transformer bounds
))




; This command asks the solver to check the satisfiability of your query
; If you wrote a sound transformer, the solver should say 'unsat'
(check-synth)
; If the solver returns 'sat', uncommenting the line below will give you the values of the various variables that violate the soundness property. This will help you debug your solution.
;(get-model)
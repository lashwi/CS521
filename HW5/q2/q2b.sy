(set-logic ALL)
; Define the function for which you are constructing a transformer
; f(x) = x^3
(define-fun f ((x Real)) Real
(* x (* x x)))


; Define the transformer as two functions
; one for the lower bound of the range and one for the upper bound
;; (define-fun Tf_lower ((l Real) (u Real)) Real
;; (* l (* l l)))

;; (define-fun Tf_upper ((l Real) (u Real)) Real
;; (* u (* u u )))

; To state the correctness of the transformer, ask the solver if there is
; (1) a Real number x and (2) an interval [l,u]
; that violate the soundness property, i.e., satisfy the negation of the soundness property.


(synth-fun Tf_lower ((x Real) (y Real)) Real
  ((Start Real) (StartBool Bool))
  ((Start Real ( x y
               (+ Start Start)
               (- Start Start)
               (* Start Start)
               (ite StartBool Start Start)))
   (StartBool Bool ((and StartBool StartBool)
                    (not StartBool)
                    (<= Start Start)))))

(synth-fun Tf_upper ((x Real) (y Real)) Real
  ((Start Real) (StartBool Bool))
  ((Start Real ( x y
               (+ Start Start)
               (- Start Start)
               (* Start Start)
               (ite StartBool Start Start)))
   (StartBool Bool ((and StartBool StartBool)
                    (not StartBool)
                    (<= Start Start)))))


(declare-var x Real)
(declare-var l Real)
(declare-var u Real)
; store complex expressions in intermediate variables
; output under the function
;; (declare-var fx Real)
;; (assert (= fx (f x)))
;; ; lower bound of range interval
;; (declare-var l_Tf Real)
;; (assert (= l_Tf (Tf_lower l u)))
;; ; upper bound of range interval
;; (declare-var u_Tf Real)
;; (assert (= u_Tf (Tf_upper l u)))

(constraint 
(=>
(and (<= l x) (<= x u)) ; if input is within given bounds
(and (<= (Tf_lower l u) (f x)) (<= (f x) (Tf_upper l u))) ; then output is within transformer bounds
))

; This command is used to synthesise functions
(check-synth)
